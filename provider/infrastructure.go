package provider

import (
	"errors"
	"io"
	"time"

	"github.com/coronatorid/core-onator/entity"
)

//go:generate mockgen -source=./infrastructure.go -destination=./mocks/infrastructure_mock.go -package mockProvider

// ErrCacheMiss returned when value from cache is not found
var ErrCacheMiss = errors.New("cache miss")

// ErrDBNotFound returned when there is no data found in the database
var ErrDBNotFound = errors.New("data not found")

// Cache is interface to connect to cache infrastructure
type Cache interface {
	// To make it not expire set expiration into 0
	Set(ctx Context, key string, value []byte, expiration time.Duration) error
	Get(ctx Context, key string) (CacheItem, error)
}

// CacheItem contain result get from Cache interface
type CacheItem interface {
	Key() string
	Value() []byte
	ExpiresIn() time.Duration
}

// TextPublisher handle whatsapp message and maybe sms in the future
type TextPublisher interface {
	Publish(ctx Context, phoneNumber, message string) error
}

// Network are external connecion for infrastructure
type Network interface {
	// successBinder must json assignable struct
	GET(ctx Context, cfg NetworkConfig, path string, successBinder interface{}, failedBinder interface{}) *entity.ApplicationError
	POST(ctx Context, cfg NetworkConfig, path string, body io.Reader, successBinder interface{}, failedBinder interface{}) *entity.ApplicationError
}

// NetworkConfig given for network request
type NetworkConfig interface {
	Host() string
	Username() string
	Password() string
	Timeout() time.Duration
	Retry() int
	RetrySleepDuration() time.Duration
}

// DB is database interface wrapper for *sql.DB
type DB interface {
	Transaction(ctx Context, transactionKey string, f func(tx TX) error) error
	ExecContext(ctx Context, queryKey, query string, args ...interface{}) (Result, error)
	QueryContext(ctx Context, queryKey, query string, args ...interface{}) (Rows, error)
	QueryRowContext(ctx Context, queryKey, query string, args ...interface{}) Row
}

// TX is database transaction
type TX interface {
	ExecContext(ctx Context, queryKey, query string, args ...interface{}) (Result, error)
	QueryContext(ctx Context, queryKey, query string, args ...interface{}) (Rows, error)
	QueryRowContext(ctx Context, queryKey, query string, args ...interface{}) Row
}

// A Result summarizes an executed SQL command.
type Result interface {
	// LastInsertId returns the integer generated by the database
	// in response to a command. Typically this will be from an
	// "auto increment" column when inserting a new row. Not all
	// databases support this feature, and the syntax of such
	// statements varies.
	LastInsertId() (int64, error)

	// RowsAffected returns the number of rows affected by an
	// update, insert, or delete. Not every database or database
	// driver may support this.
	RowsAffected() (int64, error)
}

// Row single result of database query
type Row interface {
	Scan(dest ...interface{}) error
}

// Rows multiple result of database query
type Rows interface {
	Close() error
	Columns() ([]string, error)
	Err() error
	Next() bool
	NextResultSet() bool
	Scan(dest ...interface{}) error
}
