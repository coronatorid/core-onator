// Code generated by MockGen. DO NOT EDIT.
// Source: ./whatsapp.go

// Package mockAdapter is a generated GoMock package.
package mockAdapter

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockWhatsappClient is a mock of WhatsappClient interface
type MockWhatsappClient struct {
	ctrl     *gomock.Controller
	recorder *MockWhatsappClientMockRecorder
}

// MockWhatsappClientMockRecorder is the mock recorder for MockWhatsappClient
type MockWhatsappClientMockRecorder struct {
	mock *MockWhatsappClient
}

// NewMockWhatsappClient creates a new mock instance
func NewMockWhatsappClient(ctrl *gomock.Controller) *MockWhatsappClient {
	mock := &MockWhatsappClient{ctrl: ctrl}
	mock.recorder = &MockWhatsappClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWhatsappClient) EXPECT() *MockWhatsappClientMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockWhatsappClient) Send(msg interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", msg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send
func (mr *MockWhatsappClientMockRecorder) Send(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockWhatsappClient)(nil).Send), msg)
}
