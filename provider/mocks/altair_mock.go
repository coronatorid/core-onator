// Code generated by MockGen. DO NOT EDIT.
// Source: ./altair.go

// Package mockProvider is a generated GoMock package.
package mockProvider

import (
	entity "github.com/coronatorid/core-onator/entity"
	provider "github.com/coronatorid/core-onator/provider"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAltair is a mock of Altair interface
type MockAltair struct {
	ctrl     *gomock.Controller
	recorder *MockAltairMockRecorder
}

// MockAltairMockRecorder is the mock recorder for MockAltair
type MockAltairMockRecorder struct {
	mock *MockAltair
}

// NewMockAltair creates a new mock instance
func NewMockAltair(ctrl *gomock.Controller) *MockAltair {
	mock := &MockAltair{ctrl: ctrl}
	mock.recorder = &MockAltairMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAltair) EXPECT() *MockAltairMockRecorder {
	return m.recorder
}

// GrantToken mocks base method
func (m *MockAltair) GrantToken(ctx provider.Context, request entity.GrantTokenRequest) (entity.OauthAccessToken, *entity.ApplicationError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantToken", ctx, request)
	ret0, _ := ret[0].(entity.OauthAccessToken)
	ret1, _ := ret[1].(*entity.ApplicationError)
	return ret0, ret1
}

// GrantToken indicates an expected call of GrantToken
func (mr *MockAltairMockRecorder) GrantToken(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantToken", reflect.TypeOf((*MockAltair)(nil).GrantToken), ctx, request)
}
