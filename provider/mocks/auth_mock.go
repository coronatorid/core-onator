// Code generated by MockGen. DO NOT EDIT.
// Source: ./auth.go

// Package mockProvider is a generated GoMock package.
package mockProvider

import (
	entity "github.com/coronatorid/core-onator/entity"
	provider "github.com/coronatorid/core-onator/provider"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAuth is a mock of Auth interface
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// Login mocks base method
func (m *MockAuth) Login(ctx provider.Context, request entity.Login, otpDigit int) (entity.LoginResponse, *entity.ApplicationError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, request, otpDigit)
	ret0, _ := ret[0].(entity.LoginResponse)
	ret1, _ := ret[1].(*entity.ApplicationError)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockAuthMockRecorder) Login(ctx, request, otpDigit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuth)(nil).Login), ctx, request, otpDigit)
}

// Logout mocks base method
func (m *MockAuth) Logout(ctx provider.Context, request entity.RevokeTokenRequest) *entity.ApplicationError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, request)
	ret0, _ := ret[0].(*entity.ApplicationError)
	return ret0
}

// Logout indicates an expected call of Logout
func (mr *MockAuthMockRecorder) Logout(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuth)(nil).Logout), ctx, request)
}

// RequestOTP mocks base method
func (m *MockAuth) RequestOTP(ctx provider.Context, request entity.RequestOTP, otpDigit int) (*entity.RequestOTPResponse, *entity.ApplicationError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestOTP", ctx, request, otpDigit)
	ret0, _ := ret[0].(*entity.RequestOTPResponse)
	ret1, _ := ret[1].(*entity.ApplicationError)
	return ret0, ret1
}

// RequestOTP indicates an expected call of RequestOTP
func (mr *MockAuthMockRecorder) RequestOTP(ctx, request, otpDigit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestOTP", reflect.TypeOf((*MockAuth)(nil).RequestOTP), ctx, request, otpDigit)
}

// RenewTextPublisher mocks base method
func (m *MockAuth) RenewTextPublisher(textPublisher provider.TextPublisher) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenewTextPublisher", textPublisher)
}

// RenewTextPublisher indicates an expected call of RenewTextPublisher
func (mr *MockAuthMockRecorder) RenewTextPublisher(textPublisher interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewTextPublisher", reflect.TypeOf((*MockAuth)(nil).RenewTextPublisher), textPublisher)
}

// ValidateOTP mocks base method
func (m *MockAuth) ValidateOTP(ctx provider.Context, request entity.Login, otpDigit int) *entity.ApplicationError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateOTP", ctx, request, otpDigit)
	ret0, _ := ret[0].(*entity.ApplicationError)
	return ret0
}

// ValidateOTP indicates an expected call of ValidateOTP
func (mr *MockAuthMockRecorder) ValidateOTP(ctx, request, otpDigit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateOTP", reflect.TypeOf((*MockAuth)(nil).ValidateOTP), ctx, request, otpDigit)
}
