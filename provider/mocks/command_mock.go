// Code generated by MockGen. DO NOT EDIT.
// Source: ./command.go

// Package mockProvider is a generated GoMock package.
package mockProvider

import (
	reflect "reflect"

	provider "github.com/coronatorid/core-onator/provider"
	gomock "github.com/golang/mock/gomock"
)

// MockCommand is a mock of Command interface
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// InjectCommand mocks base method
func (m *MockCommand) InjectCommand(scaffolc ...provider.CommandScaffold) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range scaffolc {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "InjectCommand", varargs...)
}

// InjectCommand indicates an expected call of InjectCommand
func (mr *MockCommandMockRecorder) InjectCommand(scaffolc ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectCommand", reflect.TypeOf((*MockCommand)(nil).InjectCommand), scaffolc...)
}

// MockCommandScaffold is a mock of CommandScaffold interface
type MockCommandScaffold struct {
	ctrl     *gomock.Controller
	recorder *MockCommandScaffoldMockRecorder
}

// MockCommandScaffoldMockRecorder is the mock recorder for MockCommandScaffold
type MockCommandScaffoldMockRecorder struct {
	mock *MockCommandScaffold
}

// NewMockCommandScaffold creates a new mock instance
func NewMockCommandScaffold(ctrl *gomock.Controller) *MockCommandScaffold {
	mock := &MockCommandScaffold{ctrl: ctrl}
	mock.recorder = &MockCommandScaffoldMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommandScaffold) EXPECT() *MockCommandScaffoldMockRecorder {
	return m.recorder
}

// Use mocks base method
func (m *MockCommandScaffold) Use() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Use")
	ret0, _ := ret[0].(string)
	return ret0
}

// Use indicates an expected call of Use
func (mr *MockCommandScaffoldMockRecorder) Use() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockCommandScaffold)(nil).Use))
}

// Example mocks base method
func (m *MockCommandScaffold) Example() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Example")
	ret0, _ := ret[0].(string)
	return ret0
}

// Example indicates an expected call of Example
func (mr *MockCommandScaffoldMockRecorder) Example() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Example", reflect.TypeOf((*MockCommandScaffold)(nil).Example))
}

// Short mocks base method
func (m *MockCommandScaffold) Short() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Short")
	ret0, _ := ret[0].(string)
	return ret0
}

// Short indicates an expected call of Short
func (mr *MockCommandScaffoldMockRecorder) Short() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Short", reflect.TypeOf((*MockCommandScaffold)(nil).Short))
}

// Run mocks base method
func (m *MockCommandScaffold) Run(args []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", args)
}

// Run indicates an expected call of Run
func (mr *MockCommandScaffoldMockRecorder) Run(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCommandScaffold)(nil).Run), args)
}
