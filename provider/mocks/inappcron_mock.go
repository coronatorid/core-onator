// Code generated by MockGen. DO NOT EDIT.
// Source: ./inappcron.go

// Package mockProvider is a generated GoMock package.
package mockProvider

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockInAppCron is a mock of InAppCron interface
type MockInAppCron struct {
	ctrl     *gomock.Controller
	recorder *MockInAppCronMockRecorder
}

// MockInAppCronMockRecorder is the mock recorder for MockInAppCron
type MockInAppCronMockRecorder struct {
	mock *MockInAppCron
}

// NewMockInAppCron creates a new mock instance
func NewMockInAppCron(ctrl *gomock.Controller) *MockInAppCron {
	mock := &MockInAppCron{ctrl: ctrl}
	mock.recorder = &MockInAppCronMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInAppCron) EXPECT() *MockInAppCronMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockInAppCron) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockInAppCronMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockInAppCron)(nil).Close))
}

// MockInAppCronAdapter is a mock of InAppCronAdapter interface
type MockInAppCronAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockInAppCronAdapterMockRecorder
}

// MockInAppCronAdapterMockRecorder is the mock recorder for MockInAppCronAdapter
type MockInAppCronAdapterMockRecorder struct {
	mock *MockInAppCronAdapter
}

// NewMockInAppCronAdapter creates a new mock instance
func NewMockInAppCronAdapter(ctrl *gomock.Controller) *MockInAppCronAdapter {
	mock := &MockInAppCronAdapter{ctrl: ctrl}
	mock.recorder = &MockInAppCronAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInAppCronAdapter) EXPECT() *MockInAppCronAdapterMockRecorder {
	return m.recorder
}

// Delay mocks base method
func (m *MockInAppCronAdapter) Delay() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delay")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Delay indicates an expected call of Delay
func (mr *MockInAppCronAdapterMockRecorder) Delay() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delay", reflect.TypeOf((*MockInAppCronAdapter)(nil).Delay))
}

// Close mocks base method
func (m *MockInAppCronAdapter) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockInAppCronAdapterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockInAppCronAdapter)(nil).Close))
}

// Run mocks base method
func (m *MockInAppCronAdapter) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockInAppCronAdapterMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockInAppCronAdapter)(nil).Run))
}

// Name mocks base method
func (m *MockInAppCronAdapter) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockInAppCronAdapterMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockInAppCronAdapter)(nil).Name))
}
