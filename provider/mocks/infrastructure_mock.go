// Code generated by MockGen. DO NOT EDIT.
// Source: ./infrastructure.go

// Package mockProvider is a generated GoMock package.
package mockProvider

import (
	provider "github.com/coronatorid/core-onator/provider"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockCache is a mock of Cache interface
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Set mocks base method
func (m *MockCache) Set(key string, value []byte, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockCacheMockRecorder) Set(key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCache)(nil).Set), key, value, expiration)
}

// Get mocks base method
func (m *MockCache) Get(key string) (provider.CacheItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(provider.CacheItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockCacheMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), key)
}

// MockCacheItem is a mock of CacheItem interface
type MockCacheItem struct {
	ctrl     *gomock.Controller
	recorder *MockCacheItemMockRecorder
}

// MockCacheItemMockRecorder is the mock recorder for MockCacheItem
type MockCacheItemMockRecorder struct {
	mock *MockCacheItem
}

// NewMockCacheItem creates a new mock instance
func NewMockCacheItem(ctrl *gomock.Controller) *MockCacheItem {
	mock := &MockCacheItem{ctrl: ctrl}
	mock.recorder = &MockCacheItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCacheItem) EXPECT() *MockCacheItemMockRecorder {
	return m.recorder
}

// Key mocks base method
func (m *MockCacheItem) Key() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].(string)
	return ret0
}

// Key indicates an expected call of Key
func (mr *MockCacheItemMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockCacheItem)(nil).Key))
}

// Value mocks base method
func (m *MockCacheItem) Value() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Value indicates an expected call of Value
func (mr *MockCacheItemMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockCacheItem)(nil).Value))
}

// ExpiresIn mocks base method
func (m *MockCacheItem) ExpiresIn() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpiresIn")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// ExpiresIn indicates an expected call of ExpiresIn
func (mr *MockCacheItemMockRecorder) ExpiresIn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpiresIn", reflect.TypeOf((*MockCacheItem)(nil).ExpiresIn))
}
