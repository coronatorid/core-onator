// Code generated by MockGen. DO NOT EDIT.
// Source: ./tracker.go

// Package mockProvider is a generated GoMock package.
package mockProvider

import (
	context "context"
	entity "github.com/coronatorid/core-onator/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTracker is a mock of Tracker interface
type MockTracker struct {
	ctrl     *gomock.Controller
	recorder *MockTrackerMockRecorder
}

// MockTrackerMockRecorder is the mock recorder for MockTracker
type MockTrackerMockRecorder struct {
	mock *MockTracker
}

// NewMockTracker creates a new mock instance
func NewMockTracker(ctrl *gomock.Controller) *MockTracker {
	mock := &MockTracker{ctrl: ctrl}
	mock.recorder = &MockTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTracker) EXPECT() *MockTrackerMockRecorder {
	return m.recorder
}

// Track mocks base method
func (m *MockTracker) Track(ctx context.Context, request entity.TrackRequest) *entity.ApplicationError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Track", ctx, request)
	ret0, _ := ret[0].(*entity.ApplicationError)
	return ret0
}

// Track indicates an expected call of Track
func (mr *MockTrackerMockRecorder) Track(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Track", reflect.TypeOf((*MockTracker)(nil).Track), ctx, request)
}
