// Code generated by MockGen. DO NOT EDIT.
// Source: ./tracker.go

// Package mockProvider is a generated GoMock package.
package mockProvider

import (
	entity "github.com/coronatorid/core-onator/entity"
	provider "github.com/coronatorid/core-onator/provider"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTracker is a mock of Tracker interface
type MockTracker struct {
	ctrl     *gomock.Controller
	recorder *MockTrackerMockRecorder
}

// MockTrackerMockRecorder is the mock recorder for MockTracker
type MockTrackerMockRecorder struct {
	mock *MockTracker
}

// NewMockTracker creates a new mock instance
func NewMockTracker(ctrl *gomock.Controller) *MockTracker {
	mock := &MockTracker{ctrl: ctrl}
	mock.recorder = &MockTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTracker) EXPECT() *MockTrackerMockRecorder {
	return m.recorder
}

// Track mocks base method
func (m *MockTracker) Track(ctx provider.Context, userID int, request entity.TrackRequest) (entity.Location, *entity.ApplicationError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Track", ctx, userID, request)
	ret0, _ := ret[0].(entity.Location)
	ret1, _ := ret[1].(*entity.ApplicationError)
	return ret0, ret1
}

// Track indicates an expected call of Track
func (mr *MockTrackerMockRecorder) Track(ctx, userID, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Track", reflect.TypeOf((*MockTracker)(nil).Track), ctx, userID, request)
}

// Create mocks base method
func (m *MockTracker) Create(ctx provider.Context, locationInsertable entity.LocationInsertable) (int, *entity.ApplicationError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, locationInsertable)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*entity.ApplicationError)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockTrackerMockRecorder) Create(ctx, locationInsertable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTracker)(nil).Create), ctx, locationInsertable)
}

// Find mocks base method
func (m *MockTracker) Find(ctx provider.Context, locationID int) (entity.Location, *entity.ApplicationError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, locationID)
	ret0, _ := ret[0].(entity.Location)
	ret1, _ := ret[1].(*entity.ApplicationError)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockTrackerMockRecorder) Find(ctx, locationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockTracker)(nil).Find), ctx, locationID)
}
